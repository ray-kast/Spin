use crate::ast::*;
use std::str::FromStr;

grammar;

// Macros

CommaList<T>: Vec<T> = {
  <T> => vec![<>],
  <l:(<T> ",")+> <r:T?> => match r {
    None => l,
    Some(r) => {
      let mut l = l;
      l.push(r);
      l
    }
  },
};

CommaListOpt<T>: Vec<T> = { => Vec::new(), CommaList<T> };

// Nonterminals

pub Doc: Doc = <res_list:ResList> <body:Node> => Doc{<>};

ResList = { => Vec::new(), "res" "{" <Res*> "}" };

Res: Res = {
  Prop => Res::Prop(<>),
  Def => Res::Def(<>),
  Style => Res::Style(<>),
};

Def: Def = {
  "def" <Ident> "=" <ElemHead> ";" => Def::Alias(<>),
  "def" <Ident> "{" <ElemBody> "}" => Def::Elem(<>),
};

// TODO: fix this syntax (namely missing style target class)
Style: Style = "style" <name:Ident> <base:BaseStyles> "{" <body:ElemBody> "}" => Style{<>};

Node: Node = {
  StrLit => Node::Text(<>),
  Elem => Node::Elem(<>),
};

Elem: Elem = <head:ElemHead> "{" <body:ElemBody> "}" => Elem{<>};

ElemHead: ElemHead = <class:Ident> <base:BaseStyles> => ElemHead{<>};

BaseStyles = { => Vec::new(), ":" <CommaList<Ident>> };

ElemBody: ElemBody = <res:ResList> <props:Prop*> <children:Children> => ElemBody{<>};

Children: Option<Vec<Node>> = { "auto" => None, Node* => Some(<>) };

Prop: Prop = <Ident> "=" <PropVal> ";" => Prop(<>);

PropVal: PropVal = {
  "default" => PropVal::Default,
  StrLit => PropVal::String(<>),
  IntLit => PropVal::Int(<>),
  Ident => PropVal::Ident(<>),
  Elem => PropVal::Elem(<>),
  "[" <CommaListOpt<PropVal>> "]" => PropVal::Array(<>),
  "{" <Children> "}" => PropVal::Block(<>),
};

// Special terminals

Ident: String = r"[\p{L}][\p{L}\p{N}\p{Pc}\p{Pd}]*" => <>.to_string();
IntLit: i64 = r"[-+]?[0-9]+" => i64::from_str(<>).unwrap();
StrLit: String = r#""(?:[^"\\]+|\\.)*""# => parse_strlit(<>);
